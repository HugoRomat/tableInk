import {guid} from './../components/Helper';
import update from 'immutability-helper';
import { combineReducers } from 'redux';
import undoable, { distinctState } from 'redux-undo';
import { includeAction, excludeAction } from 'redux-undo';

import alphabetPerso from './../usecases/alphabet.json'
import strokes from './../usecases/strokes.json'

const initialState = { 
    'sketchLines': [],
    'groupLines': [],
    'stickyLines': [],
    "menuItems": [],
    "lettres": [],
    "textes":[]
  };

    // console.log(alphabetPerso)




var alphabet = 'abcdefghijklmnopqrstuvwxyz '.split('');
var lettres = [];

alphabet.forEach((d)=>{
  lettres.push({'id':d, 'lines':[]})
})

initialState.lettres = lettres; 

initialState.lettres = alphabetPerso;

// initialState.groupLines = [{"id":"b06a2a656f3d55e70f56cc34263e2f88c","lines":[["bfdb049e8089763c9598484ecdbb90b0b","bc1af92e22a5421d597599efe49cc4e8e","b660738c6a52d0e118fdbd7ad55d65b5a","b75d77e1dde7fe0e94a4fbdd0eb1ef99d","bf4c4436e2a9d3121805a3402b7e8e99c","b4a15aa8820653127a3b796485e63b37a","b3e72e018e8e07470146c3416504774a3","b1e93fc0beb94501ee6e1404d1254c31a","b2d5dd6da9ec457a1572647c32967d253","b489b83848d45f62eca4fd651b8460a48","b7508d16ec617be345da7369a22349898","b33ddd0dd8349f0c37ae7c8477ed470b6","bebd8a5a6ade0bdb3c723aa058206a931","be3ba7da96998cbe98312efe9a1a85d8b","bae4f3aca26ac908f441fdafa7d9d903c","b89af7bdc914e5cfd5d0429320cb542ee","b24a26b47dbfd2db438e7750db1e1befa","b53e19e4fbad118b21d1e667d53a3bbd9","bc6252c70b628b7f0a65c1c917ceb2985","bb4568ea9142160c3952d7f2286cc5864","b37516e64b87102527dcaaeae019bda17"],["be66dcb6239442cdd25446c10038c69dd","b0c9e28ce6d07c682d73eb7fccf3a68f6","b9d46cb43a2d57c8312244766d22a5d61","b11189596f93e58a799b5070ebd8ce6ad","b7071846358778b28850bb455c1cb9ddc","b834b9cf48977b82efc35c9bef21bd0c5","be411c7d98880f4966064dd32cfcb493f","b264183fffe40ce34f2723ecf3fef1b8c","b762fb0574387a69fa5d87ea486a2c981","ba08fabae56bd203e5be875d255898c57","b64703fb3f01c845e6031ead5a843453a","b41482832496d94f936727d79fb4241f7","b7f2aca44bf2365f5fb670f6239050f57","b06764d583e55e5b99d81acaef0d09db0","bc031537b600287984de83f21898e80ce","b5a964c1c250d8c926ddeef9a072d72f7","bcb48a95102c5983492336121960ae93c","bb23650864548e80c4e0cee4a1487f18c","b8c074af3cbe2b2a086fac4bfe94fe4da","b27d5da90fb99df1f93b8a06d30cad3e4","be5412f9a2fd4c1aeaa04491400cd36b1","b461a581c133053216b424e796dd07240"],["b123c9c6d0ed7d56ef729264149021923","b23331fca203f5c13d518bfe245d46413","b3616163b01b0f9d9b13c52677d52b235","bfb5068174e2f6e5e2b4d24a022aa1431","b6538190bbf80520006c56de811f0931a","bc83d78252e6fce723774b7c5c1e03207","bc7e0db9af19e8001379e17a41403b26e","bce767ca4605d4b07cabbc47f15d27d1f","b39d5e20cbba218e4b44bfb129d009d0f","bfe211d75457bdea22c46494b63214347","bcd231fcd33b3a390535957dca452fa64","b6e75bbf31c3c563178471edfa1ae60e3","b29fa3b36475869f853dfd75b74d6e939","b4dc63267dcb8235c3239c49845ae302c","baf713eb2731fdf4abc1490b7c59a85b5","ba6762effc7db8262e8c6c1ee00bbba26","b316ab4d0cc33c61113fcd1c1e8890375","ba79f23bd7cb70921ac38e9a9b935e316","bf64b6cd7da87b295adbd15e619660645","bdf92700648292dfa1e34d3bec0a1bc35"]],"position":[0,0],"model":{"points":[[0,0],[9,133.5],[14.5,218]],"id":"b10336a854fdd555555f666647e3edf02","paddingBetweenLines":50,"placeHolder":[{"id":"topbackground","data":{},"lines":[]},{"id":"leftbackground","data":{},"lines":[]},{"id":"rightbackground","data":{},"lines":[]},{"id":"bottombackground","data":{},"lines":[]},{"id":"left","data":{},"lines":[]},{"id":"right","data":{},"lines":[]},{"id":"middle","data":{},"lines":[]}],"position":[141.5,306],"textPosition":{"where":"right","position":[10,50]}},"stroke":{"points":[[0,0],[-0.5,0],[-1,-0.5],[-1.5,0],[-2,0],[-2.5,0],[-3,0.5],[-3.5,1.5],[-4,2],[-5,3.5],[-5.5,4.5],[-7,5],[-8,6.5],[-10,7.5],[-11.5,9],[-12,9.5],[-13,10.5],[-14,12],[-15.5,14],[-16.5,16.5],[-17,19],[-18.5,25],[-19.5,28],[-20,31.5],[-20,34],[-20,36],[-20.5,40.5],[-20.5,46],[-21,51],[-21,55.5],[-21,59.5],[-21,63.5],[-20.5,67.5],[-20,71.5],[-20,74.5],[-19,77],[-18.5,80],[-18,84],[-16.5,88],[-15.5,91.5],[-14.5,95],[-13.5,98],[-12,101],[-10.5,104],[-9,107],[-8.5,108],[-7.5,109.5],[-6,111.5],[-5.5,112.5],[-5,113.5],[-3.5,115.5],[-2,117],[-0.5,118.5],[0.5,120],[2,121.5],[4,122.5],[5.5,124],[7.5,125],[9,126.5],[11,127.5],[12.5,128.5],[14.5,129.5],[16,131],[18,132],[19.5,133.5],[21.5,134.5],[23,136],[23.5,136.5],[24.5,137.5],[26,139],[28,141],[29.5,143],[31.5,145],[33,147],[35,148.5],[36.5,150],[38,152.5],[39.5,154],[41,155.5],[42,157],[43.5,158.5],[45.5,160.5],[46.5,162],[47.5,163.5],[48,164.5],[49,165.5],[50,166.5],[51.5,168.5],[52.5,170],[54,172.5],[55,174],[56,176],[57,177.5],[57.5,178.5],[58,179],[58.5,180],[58.5,180.5],[59.5,182],[60,183.5],[60.5,185],[61,186],[61.5,187.5],[61.5,188],[61.5,189],[62,190],[62,191.5],[62.5,193],[62.5,194.5],[62.5,195.5],[62.5,197],[62.5,197.5],[62.5,198],[62,199],[62,200],[62,200.5],[62,201],[62,202],[61.5,203],[61,204],[61,204.5],[61,205],[60.5,206],[60,207.5],[59,208.5],[58.5,210],[57.5,211],[56.5,213],[56,214],[55,215.5],[54.5,217],[53.5,218],[52.5,219.5],[51.5,221],[50,222.5],[49,224],[48,225.5],[46.5,227.5],[45.5,229.5],[44,231],[42.5,232.5],[41.5,234.5],[41,235.5],[40.5,236.5],[39,238.5],[38,240.5],[37,242],[36,244],[34.5,246],[33,247.5],[32.5,248.5],[32,249.5],[31.5,250.5],[30.5,251],[29.5,253],[28,254.5],[26.5,256.5],[25.5,258.5],[24.5,260.5],[23,262.5],[22,264],[21,265.5],[20.5,267],[19.5,268.5],[18.5,270],[18,271.5],[17.5,272.5],[17,273],[16.5,274],[16,274.5],[15.5,276.5],[14.5,278],[14,280],[13.5,281.5],[12.5,283.5],[12.5,284],[12,285],[11.5,286.5],[11.5,288],[11,289.5],[11,291.5],[10.5,292],[10.5,293],[10.5,294],[10.5,295],[10.5,295.5],[11,297],[11,298.5],[11,300.5],[11.5,302.5],[12,304],[12,306],[12.5,307],[12.5,308],[13,309.5],[13,310.5],[13.5,311.5],[14,313.5],[14.5,315],[15,317],[15.5,319],[16,321],[16.5,323],[17,324.5],[18,326.5],[18.5,328.5],[19,330.5],[20,333],[20.5,334.5],[21,336],[21.5,338],[22,340.5],[22.5,343],[23.5,345],[24,348],[24.5,350.5],[25.5,353.5],[26,356],[27,358.5],[27.5,361.5],[28.5,364],[29,367],[30,369.5],[30.5,372.5],[31.5,375],[32.5,378],[33,380],[34,382.5],[34.5,384.5],[35,387],[35.5,389],[36,391.5],[36.5,394],[37,396.5],[37.5,399.5],[37.5,402.5],[38,405],[38,406],[38,407.5],[38.5,410],[38.5,412.5],[38.5,415],[38.5,417.5],[38.5,420.5],[38.5,423],[38.5,425],[38,427.5],[38,429.5],[37.5,432],[37,434],[37,435],[36.5,436],[36,438.5],[35.5,439.5],[35.5,440.5],[35,441.5],[34.5,443],[33.5,445],[32.5,447],[32,448.5],[31.5,449.5],[30.5,451.5],[29,453.5],[28,455.5],[27,457.5],[26,459.5],[25,461],[24,462.5],[22.5,464.5],[21.5,466],[21,466.5],[20.5,467],[20,467.5],[19,468.5],[18.5,469],[18,469.5],[17.5,471],[16,472.5],[15,473.5],[14,474],[13,475],[12,476],[11,477],[10.5,478],[9.5,479],[9.5,479.5],[9,480]],"position":[465,220.5]}}]
// initialState.stickyLines = [{"points":[[0,0],[2.5,55],[0,176.5]],"id":"b903c3e66365dfeb5a9142e4aaabd82a0","paddingBetweenLines":50,"placeHolder":[{"id":"background","data":{},"lines":[{"id":"b2f6ea8cbdf02d3e35f31ef72bb11b047","data":[[-72,113.5],[-72.5,114],[-73,114],[-73.5,114.5],[-74,114.5],[-74.5,115],[-75.5,115.5],[-76.5,117],[-77.5,118],[-77.5,118.5],[-78.5,120],[-79,120.5],[-79.5,121.5],[-80,122],[-80.5,123],[-81.5,124],[-82,124.5],[-83,126.5],[-83,127.5],[-83.5,129],[-84,130],[-84.5,131.5],[-85,134],[-85,135],[-85,136.5],[-85,138],[-85,139],[-85,140.5],[-84.5,141.5],[-84,143],[-84,143.5],[-83.5,145.5],[-83,146],[-83,146.5],[-81.5,148],[-80.5,148.5],[-80,149.5],[-79,149.5],[-78,150],[-76,150.5],[-75.5,150.5],[-75,150.5],[-73.5,151],[-71,150.5],[-69,149.5],[-67,147.5],[-65.5,146],[-65,145.5],[-64.5,145],[-63,143.5],[-62,142],[-61,140.5],[-60.5,140],[-59.5,138],[-59,136],[-58.5,135.5],[-58.5,135],[-58,132.5],[-57.5,132],[-57.5,131],[-57.5,130],[-57.5,128.5],[-57.5,128],[-57.5,127.5],[-58,127],[-58.5,126.5],[-59.5,126.5],[-60,126.5],[-60.5,127],[-61,127],[-61.5,127.5],[-62,128],[-62,128.5],[-62.5,129.5],[-63,130.5],[-63,131.5],[-63.5,133.5],[-63.5,134],[-63.5,136],[-63.5,136.5],[-63,138],[-62.5,140],[-62,140.5],[-62,141],[-61,142.5],[-60,144],[-60,144.5],[-59.5,145],[-58.5,146.5],[-57,147.5],[-56.5,148],[-56,148],[-55,149],[-54,149.5],[-53,149.5],[-52,149.5],[-51,149],[-50.5,149],[-49,148],[-48.5,147.5],[-48,147],[-47,145.5],[-47,145],[-46.5,144.5],[-46,143],[-45.5,142],[-45,141],[-44.5,139],[-44,138.5],[-44,138],[-44,136],[-44,134.5],[-44,133],[-44,132.5],[-44,132],[-44,131.5],[-44,131],[-44,130.5],[-44,130],[-44,129.5],[-44.5,129.5],[-44.5,129],[-45,129.5],[-45.5,129],[-46,129],[-46.5,129],[-47,128],[-47,127.5],[-47.5,128.5],[-48,129.5],[-48,130],[-48,130.5],[-48.5,131],[-48.5,132.5],[-48,133.5],[-48,134.5],[-48,135],[-47.5,136.5],[-47.5,138],[-47,139],[-46.5,140.5],[-46.5,141.5],[-46,142],[-45.5,143.5],[-44.5,144.5],[-44,145],[-44,146],[-43.5,146.5],[-42.5,147],[-42,147],[-41,147.5],[-40,147.5],[-39.5,147.5],[-38.5,147],[-38,147],[-37.5,146.5],[-36.5,146],[-35.5,145],[-35,145],[-34.5,144.5],[-33.5,143],[-33.5,142.5],[-32.5,141],[-32,140.5],[-31.5,139],[-31,138],[-30.5,137],[-30,135],[-29.5,134.5],[-29.5,133],[-29,131.5],[-29,130.5],[-29,130],[-29,129.5],[-29,129],[-29,128.5],[-29,128],[-29,127.5],[-29,127],[-29.5,127],[-30,127.5],[-30.5,128],[-31.5,129],[-31.5,129.5],[-31.5,130],[-31.5,130.5],[-32,131.5],[-32,132.5],[-32,133],[-31.5,133.5],[-31.5,135.5],[-31.5,136],[-31,138],[-31,139],[-30.5,141],[-30.5,142],[-29.5,144],[-29.5,145.5],[-29,147],[-28,148],[-27.5,149.5],[-26.5,151],[-26,151.5],[-25.5,152],[-24.5,153.5],[-23.5,154],[-22,154.5],[-21.5,155],[-19.5,155.5],[-17.5,156],[-17,156],[-16,156],[-13.5,155.5],[-12.5,155.5],[-10,155.5],[-7.5,155],[-6.5,154.5],[-6,154],[-3.5,153],[-2,152],[0,151],[0.5,150.5],[3.5,148],[6.5,146.5],[7,145.5],[8,145],[10.5,143.5],[13,141.5],[13.5,141],[14.5,139.5],[15.5,138.5],[16.5,137.5],[17,136.5],[18,135],[18.5,134],[19,132],[19,131.5],[19,130.5],[19,130],[19,129],[19,128.5],[19,127.5],[18.5,127],[18.5,126.5],[18,125.5],[18,125],[17.5,124.5],[17,124],[16.5,123.5],[16,122.5],[15,122],[14,122],[13.5,122],[12.5,122.5],[12,122.5],[11.5,123],[11,123],[11,124],[10.5,124],[10.5,125],[10.5,125.5],[10,126],[10,126.5],[10,127],[10,128],[10,128.5],[10,130],[10,131],[10,133],[10.5,135],[10.5,136],[10.5,136.5],[11,138.5],[11.5,140],[12,141.5],[12.5,143.5],[13,144.5],[13.5,146],[14,147.5],[14.5,149.5],[15,150.5],[15,151],[16,153],[16.5,153.5],[17.5,155],[18,155.5],[19,156],[20.5,156.5],[21,157],[21.5,157],[23,156.5],[24,156.5],[26,155.5],[28,154.5],[29,154],[30.5,153],[32,151.5],[34,150],[34.5,149.5],[36.5,147.5],[37,147],[37.5,146],[39.5,143.5],[40,143],[42,140.5],[43,139.5],[44.5,137],[45,136.5],[46.5,134.5],[47,134],[47.5,132],[48.5,129.5],[49,128.5],[49,127.5],[49,126.5],[49,126],[48.5,124.5],[48,124],[47,123],[47,122.5],[46.5,122.5],[45.5,121.5],[45,121],[44.5,120.5],[44.5,120],[44,119.5],[43,119],[42,118.5],[41.5,118],[41,118],[40.5,118],[40,118],[39,118],[38.5,118.5],[38.5,119],[38,119],[37.5,119.5],[37,119.5],[36.5,121],[36.5,122.5],[36,124.5],[36,127],[36,128.5],[36,129.5],[36,130],[36.5,131.5],[36.5,133.5],[36.5,134.5],[37,135.5],[37.5,136.5],[38.5,139],[38.5,140],[39,140.5],[40,142.5],[40.5,143.5],[41,144],[41.5,145],[42.5,147.5],[44.5,151],[45.5,152.5],[47,154],[47.5,154.5],[50,156.5],[53,159],[54,159.5],[56.5,160.5],[58.5,161],[60,161.5],[61,161.5],[64,161.5],[66.5,162],[69,162],[72.5,162],[73.5,162],[75.5,161.5],[77.5,160],[78.5,159.5],[81.5,157.5],[82.5,157],[86,154.5],[88,152.5],[90,151],[91,150],[94,146.5],[96,143],[97,142.5],[98.5,139],[99,138],[100.5,134.5],[100.5,133.5],[101,132.5],[101.5,130],[102,127.5],[102,127],[102,126],[102,124.5],[101.5,124],[101.5,122],[101,121.5],[100.5,120.5],[100,120.5],[99.5,119.5],[99.5,119],[98.5,119],[98,119],[97.5,118.5],[96.5,118.5],[96,118.5],[95,118.5],[94.5,118],[93,118],[92,118],[91,118.5],[90.5,118.5],[90,119],[90,119.5],[89,120.5],[88.5,121.5],[88.5,122],[88,123],[88,124],[87.5,125.5],[87.5,127],[87.5,128],[87.5,128.5],[87.5,130.5],[88,132.5],[88,133],[89,135.5],[89,136.5],[89.5,138],[89.5,139],[90,139],[90,141],[90.5,142],[90.5,143],[91,144],[91,145],[92,146.5],[92,147],[92.5,148],[93,148],[93.5,149],[94,150],[94.5,150.5],[95,151.5],[95.5,152],[96,153.5],[96.5,154.5],[97,155.5],[97.5,155.5],[98,156.5],[99,157.5],[99.5,158.5],[100,159],[101,160],[101,160.5],[102,161.5],[103,162.5],[103.5,163],[104.5,163.5],[105.5,163.5],[106.5,164],[107.5,164],[108,164],[108.5,164.5],[109,164.5]]}]},{"id":"topbackground","data":{},"lines":[]},{"id":"leftbackground","data":{},"lines":[]},{"id":"rightbackground","data":{},"lines":[]},{"id":"bottombackground","data":{},"lines":[]},{"id":"left","data":{},"lines":[]},{"id":"right","data":{},"lines":[]},{"id":"middle","data":{},"lines":[]}],"position":[132,251],"textPosition":{"where":"right","position":[10,50]}}]
initialState.textes = [{"id":"b123453", 'content': 'hello world', 'position': [500,700]}]

initialState.sketchLines = strokes

  const rootReducer = (state = initialState, action) => {
    // console.log(action.type)
    // console.log(JSON.stringify(state.stickyLines));
    switch (action.type) {
      
      //Add line to placeholder
      case 'ADD_LINE_TO_STICKY_GROUP':
        var id = action.data.idGuide;
        var where = action.data.where;
        var data = action.data.data;
        var index = state.stickyLines.indexOf(state.stickyLines.find(x => x.id == id))
        if (index > -1){

          var indexLine = state.stickyLines[index]['placeHolder'].indexOf(state.stickyLines[index]['placeHolder'].find(x => x.id == where))
          if (indexLine > -1){

          // console.log(index, indexLine)
            state = update(state, { 
              stickyLines: {
                [index] : {
                  placeHolder: {
                    [indexLine]: { 
                      lines: {$push: data}
                    }
                  }
                  
                }
              }
            })
          }
        }
        
        return state;

      case 'ADD_TEXT':
        // console.log('GO', action.data)
          return { 
            ...state, 
            textes: [ ...state.textes, action.data] 
          };

        case 'ADD_LINES_LETTER':
          var idLetter = action.data.id;
          var line = action.data.line;
          var index = state.lettres.indexOf(state.lettres.find(x => x.id == idLetter));
          // console.log(index)
          if (index > -1){
            state = update(state, { 
              lettres: {
                [index] : {
                  lines: {$push: [{'id': action.data.idLine, 'points': line}]}
                }
              }
            })
          }
          console.log(state.lettres)
        return state;

      case 'ADD_SKETCH_LINE':
        return { 
          ...state, 
          sketchLines: [ ...state.sketchLines, action.data] 
        };

      case 'CHANGE_MODEL_GROUP_LINES':
        var idsGroup = action.data.idGroups;
        idsGroup.forEach((id)=>{
          var index = state.groupLines.indexOf(state.groupLines.find(x => x.id == id));
          // console.log(state.groupLines[index])
          if (index > -1){
            state = update(state, { 
              groupLines: {
                [index] : {
                  model: {$set: action.data.model},
                }
              }
            })
          }
        })
        return state;

        

      case 'MOVE_SKETCH_LINES':
        // console.log('HEYYYY')
        action.data.forEach((element)=>{
          var id = element.id;
          var position = element.position;
          var index = state.sketchLines.indexOf(state.sketchLines.find(x => x.id == id))
          // console.log(state.sketchLines[index])
            if (index > -1){
              state = update(state, { 
                sketchLines: {
                  [index] : {
                    position: {$set: position},
                  }
                }
              })
            }
          })
          return state;
        
        case 'CREATE_STICKY_LINES':
            return { 
              ...state, 
              stickyLines: [ ...state.stickyLines, action.data] 
            };
      case 'CREATE_GROUP_LINES':
        return { 
          ...state, 
          groupLines: [ ...state.groupLines, action.data] 
        };
      
      
        case 'SHOULD_OPEN_MENU':
        if (action.data.shouldOpen == true){
          return { 
            ...state, 
            menuItems: [ ...state.menuItems, action.data] 
          };
        }
        else if (action.data.shouldOpen == false){
          var index = state.menuItems.indexOf(state.menuItems.find(x => x.id == action.data.id))
          if (index > -1){
            state = update(state, { 
              menuItems: {$splice: [[index, 1]]}
            })
          }
          return state;
        }
         
      case 'ADD_LINES_CLASS':
        var idsLine = action.data.idLines;
       
        idsLine.forEach((id)=>{
          var index = state.sketchLines.indexOf(state.sketchLines.find(x => x.id == id))
          if (index > -1){
            // console.log(state.sketchLines[index]['data']['class'])
            state = update(state, { 
              sketchLines: {
                [index] : {
                  data: {
                    class: {$push: action.data.class},
                  }
                }
              }
            })
          }
        })
        return state;


        case 'ADD_LINES_TO_STICKY':
          var id = action.data.id;
          console.log(action.data)
          // 'data': {'linesAttached': this.objectIn}, 
          // idsLine.forEach((id)=>{
            var index = state.stickyLines.indexOf(state.stickyLines.find(x => x.id == id))
            // console.log(index)
            if (index > -1){
              console.log(action.data, state.stickyLines[index])
              // console.log(state.sketchLines[index]['data']['class'])
              state = update(state, { 
                stickyLines: {
                  [index] : {
                    data: {
                      linesAttached: {$push: action.data.idLines},
                    }
                  }
                }
              })
            }
          
          return state;

        
        // console.log(action.data)

      case 'REMOVE_SKETCH_LINES':
          var idsToDelete = action.data;
          idsToDelete.forEach((idToDelete)=>{
            var index = state.sketchLines.indexOf(state.sketchLines.find(x => x.id == idToDelete))
            if (index > -1){
              state = update(state, { 
                sketchLines: {$splice: [[index, 1]]}
              })
            }
          })
          return state;

        
        
      default:
        return state;
    }
  }
    

  export default combineReducers({
    rootReducer : undoable(rootReducer)
  })

  